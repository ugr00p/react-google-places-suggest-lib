{"version":3,"sources":["../src/index.js"],"names":["GooglePlacesSuggest","state","coordinate","googleMaps","focusedSuggestIndex","selectedLabel","suggests","handleSelectSuggest","suggest","onSelectSuggest","props","geocodeSuggest","description","setState","updateSuggests","search","suggestTypes","suggestComponentRestrictions","autocompleteService","places","AutocompleteService","getPlacePredictions","input","types","componentRestrictions","googleSuggests","suggestLabel","callback","geocoder","Geocoder","geocode","address","results","status","GeocoderStatus","OK","location","geometry","latitude","lat","longitude","lng","title","formatted_address","handleKeyDown","e","length","key","preventDefault","focusSuggest","index","renderNoResults","textNoResults","renderDefaultSuggest","structured_formatting","firstMatchedString","main_text_matched_substrings","shift","labelParts","before","substr","offset","matched","after","nextProps","renderSuggest","baseClassName","activeClassName","isDropdownOpen","map","children","renderSuggests","React","PureComponent","propTypes","PropTypes","any","isRequired","object","func","string","array","bool","defaultProps","country","geocodeReverse"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * Created by quando on 10/3/17.\n * based from https://github.com/xuopled/react-google-places-suggest\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\n\nclass GooglePlacesSuggest extends React.PureComponent {\n  state = {\n    coordinate: null,\n    googleMaps: null,\n    focusedSuggestIndex: 0,\n    selectedLabel: \"\",\n    suggests: [],\n  };\n\n  componentWillMount() {\n    this.updateSuggests(this.props.search)\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.updateSuggests(nextProps.search)\n  }\n\n  handleSelectSuggest = (suggest) => {\n    const {onSelectSuggest} = this.props\n\n    this.geocodeSuggest(suggest.description, () => {\n      this.setState({selectedLabel: suggest.description, suggests: []}, () => {\n        onSelectSuggest(suggest, this.state.coordinate)\n      })\n    })\n  };\n\n  updateSuggests = (search) => {\n    const {googleMaps, suggestTypes, suggestComponentRestrictions} = this.props\n    const autocompleteService = new googleMaps.places.AutocompleteService()\n\n    if (!search) {\n      this.setState({suggests: []})\n      return\n    }\n\n    autocompleteService.getPlacePredictions({\n      input: search,\n      types: suggestTypes,\n      componentRestrictions: suggestComponentRestrictions,\n    }, (googleSuggests) => {\n      if (!googleSuggests) {\n        this.setState({suggests: []})\n        return\n      }\n\n      this.setState({\n        focusedSuggestIndex: 0,\n        suggests: googleSuggests,\n      })\n    })\n  };\n\n  geocodeSuggest = (suggestLabel, callback) => {\n    const {googleMaps} = this.props\n    const geocoder = new googleMaps.Geocoder()\n\n    geocoder.geocode({address: suggestLabel}, (results, status) => {\n      if (status === googleMaps.GeocoderStatus.OK) {\n        const location = results[0].geometry.location\n        const coordinate = {\n          latitude: location.lat(),\n          longitude: location.lng(),\n          title: suggestLabel,\n          formatted_address: results[0].formatted_address,\n        }\n\n        this.setState({coordinate}, callback)\n      }\n    })\n  };\n\n  handleKeyDown = (e) => {\n    const {focusedSuggestIndex, suggests} = this.state\n\n    if (suggests.length > 0) {\n      if (e.key === \"Enter\" || e.key === \"ArrowUp\" || e.key === \"ArrowDown\") {\n        e.preventDefault()\n      }\n\n      if (e.key === \"Enter\") {\n        this.handleSelectSuggest(suggests[focusedSuggestIndex])\n      } else if (e.key === \"ArrowUp\") {\n        if (suggests.length > 0 && focusedSuggestIndex > 0) {\n          this.focusSuggest(focusedSuggestIndex - 1)\n        }\n      } else if (e.key === \"ArrowDown\") {\n        if (suggests.length > 0 && focusedSuggestIndex < suggests.length - 1) {\n          this.focusSuggest(focusedSuggestIndex + 1)\n        }\n      }\n    }\n  };\n\n  focusSuggest = (index) => this.setState({focusedSuggestIndex: index});\n\n  renderNoResults = () => this.props.textNoResults && (\n    <li className=\"placesSuggest_suggest\">\n      {this.props.textNoResults}\n    </li>\n  );\n\n  renderDefaultSuggest = (suggest) => {\n    const {description, structured_formatting} = suggest\n    const firstMatchedString = structured_formatting.main_text_matched_substrings.shift()\n    let labelParts = null\n\n    if (firstMatchedString) {\n      labelParts = {\n        before: description.substr(0, firstMatchedString.offset),\n        matched: description.substr(firstMatchedString.offset, firstMatchedString.length),\n        after: description.substr(firstMatchedString.offset + firstMatchedString.length),\n      }\n    }\n\n    return (\n      <div>\n        <span className=\"placesSuggest_suggestLabel\">\n          {labelParts ?\n            <span>\n              {labelParts.before.length > 0 ? <span>{labelParts.before}</span> : null}\n              <span className=\"placesSuggest_suggestMatch\">{labelParts.matched}</span>\n              {labelParts.after.length > 0 ? <span>{labelParts.after}</span> : null}\n            </span> : description\n          }\n        </span>\n      </div>\n    )\n  };\n\n  renderSuggest(suggest) {\n    const {renderSuggest} = this.props\n    return renderSuggest\n      ? renderSuggest(suggest)\n      : this.renderDefaultSuggest(suggest)\n  }\n\n  renderSuggests() {\n    const {baseClassName, activeClassName, isDropdownOpen} = this.props;\n    const {focusedSuggestIndex, suggests} = this.state\n    if (isDropdownOpen) {\n      return (\n        <ul className=\"placesSuggest_suggests\">\n          {suggests.length > 0 ?\n            // eslint-disable-next-line\n            suggests.map((suggest, key) => (<li\n              key={key}\n              className={`${baseClassName} ${focusedSuggestIndex === key && activeClassName}`}\n              onClick={() => this.handleSelectSuggest(suggest)}\n            >\n              {this.renderSuggest(suggest)}\n            </li>))\n          : this.renderNoResults()\n          }\n        </ul>\n      )\n    }\n\n    return '';\n  }\n\n  render() {\n    const {selectedLabel} = this.state\n    const {children, search} = this.props\n    // eslint-disable-next-line\n    return (<div className=\"placesSuggest\" onKeyDown={this.handleKeyDown}>\n      {children}\n      {search && selectedLabel !== search && this.renderSuggests()}\n    </div>)\n  }\n}\n\nGooglePlacesSuggest.propTypes = {\n  children: PropTypes.any.isRequired,\n  googleMaps: PropTypes.object.isRequired,\n  onSelectSuggest: PropTypes.func,\n  renderSuggest: PropTypes.func,\n  search: PropTypes.string,\n  suggestTypes: PropTypes.array,\n  suggestComponentRestrictions: PropTypes.object,\n  textNoResults: PropTypes.string,\n  baseClassName: PropTypes.string,\n  activeClassName: PropTypes.string,\n  isDropdownOpen: PropTypes.bool,\n}\n\nGooglePlacesSuggest.defaultProps = {\n  onSelectSuggest: () => {},\n  search: \"\",\n  suggestTypes: [],\n  suggestComponentRestrictions: {\n    country: \"au\",\n  },\n  textNoResults: \"No results\",\n  baseClassName: \"placesSuggest_suggest\",\n  activeClassName: \"placesSuggest_suggest-active\",\n  isDropdownOpen: false,\n}\n\nexport const geocodeReverse = (googleMaps, {location}, callback) => {\n  const geocoder = new googleMaps.Geocoder()\n\n  geocoder.geocode({location}, (results, status) => {\n    if (status === googleMaps.GeocoderStatus.OK) {\n      const {lat, lng} = results[0].geometry.location\n      const coordinate = {\n        latitude: lat(),\n        longitude: lng(),\n        title: results[0].formatted_address,\n      }\n\n      callback(coordinate)\n    }\n  })\n}\n\nexport default GooglePlacesSuggest\n"]}